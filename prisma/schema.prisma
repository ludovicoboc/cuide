generator client {
  provider = "prisma-client-js"
  output   = "../app/lib/prisma" // Adicionar o caminho de sa√≠da novamente
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Usuario {
  id                      String             @id @default(uuid())
  email                   String             @unique
  nome                    String
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt
  altoContraste           Boolean            @default(false)
  reducaoEstimulos        Boolean            @default(false)
  textoGrande             Boolean            @default(false)
  metaHorasSono           Int                @default(8)
  metaTarefasPrioritarias Int                @default(3)
  metaCoposAgua           Int                @default(8)
  metaPausasProgramadas   Int                @default(4)
  notificacoesAtivas      Boolean            @default(true)
  pausasAtivas            Boolean            @default(true)
  lembretesSono           LembreteSono[]
  receitas                Receita[]
  receitasFavoritas       ReceitaFavorita[]
  refeicoes               Refeicao[]
  registrosRefeicao       RegistroRefeicao[]
  registrosSono           RegistroSono[]
}

model Refeicao {
  id        String  @id @default(uuid())
  horario   String
  descricao String
  usuarioId String
  usuario   Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@index([usuarioId])
}

model RegistroRefeicao {
  id        String   @id @default(uuid())
  data      DateTime
  horario   String
  descricao String
  tipoIcone String?
  foto      String?
  usuarioId String
  usuario   Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@index([usuarioId])
  @@index([data])
}

model RegistroHidratacao {
  id         String   @id @default(uuid())
  data       DateTime @default(now())
  horario    String
  quantidade Int
  usuarioId  String

  @@index([usuarioId])
  @@index([data])
}

model RegistroSono {
  id        String    @id @default(uuid())
  inicio    DateTime
  fim       DateTime?
  qualidade Int?
  notas     String?
  usuarioId String
  usuario   Usuario   @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@index([usuarioId])
  @@index([inicio])
}

model LembreteSono {
  id         String  @id @default(uuid())
  tipo       String
  horario    String
  diasSemana Int[]
  ativo      Boolean @default(true)
  usuarioId  String
  usuario    Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@index([usuarioId])
}

model Receita {
  id           String            @id @default(uuid())
  nome         String
  descricao    String
  categorias   String[]
  tags         String[]
  tempoPreparo Int
  porcoes      Int
  calorias     String
  imagem       String?
  usuarioId    String
  ingredientes Ingrediente[]
  passos       PassoReceita[]
  usuario      Usuario           @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  favoritos    ReceitaFavorita[]

  @@index([usuarioId])
}

model Ingrediente {
  id         String  @id @default(uuid())
  nome       String
  quantidade Float
  unidade    String
  receitaId  String
  receita    Receita @relation(fields: [receitaId], references: [id], onDelete: Cascade)

  @@index([receitaId])
}

model PassoReceita {
  id        String  @id @default(uuid())
  ordem     Int
  descricao String
  receitaId String
  receita   Receita @relation(fields: [receitaId], references: [id], onDelete: Cascade)

  @@index([receitaId])
}

model ReceitaFavorita {
  id        String  @id @default(uuid())
  usuarioId String
  receitaId String
  receita   Receita @relation(fields: [receitaId], references: [id], onDelete: Cascade)
  usuario   Usuario @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@unique([usuarioId, receitaId])
  @@index([usuarioId])
  @@index([receitaId])
}
